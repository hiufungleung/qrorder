name: Build & Deploy QR Order System

on:
  push:
    branches: ["main"]
  workflow_dispatch:

# All environment variables are set in GitHub repository ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí Variables
# Required Variables: IMAGE_NAME, IMAGE_TAG, APP_PORT, CONTAINER_NAME, DOCKER_USERNAME, EC2_HOST, EC2_USER, NEXTAUTH_URL

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push (amd64) to Docker Hub
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -euo pipefail

            # Configuration & Validation
            CONTAINER=${{ vars.CONTAINER_NAME }}
            PORT=${{ vars.APP_PORT }}
            IMAGE_NAME="${{ vars.IMAGE_NAME }}"
            RAW_DIGEST="${{ needs.build.outputs.digest }}"
            DIGEST="$(printf '%s' "$RAW_DIGEST" | tr -d '\r\n')"

            # Validate required variables
            if [ -z "$CONTAINER" ] || [ -z "$PORT" ] || [ -z "$IMAGE_NAME" ]; then
              echo "‚ùå Error: Missing required environment variables"
              echo "CONTAINER: ${CONTAINER:-'NOT SET'}"
              echo "PORT: ${PORT:-'NOT SET'}"
              echo "IMAGE_NAME: ${IMAGE_NAME:-'NOT SET'}"
              exit 1
            fi

            # Determine image reference
            if [ -n "$DIGEST" ]; then
              IMAGE_REF="${IMAGE_NAME}@${DIGEST}"
            else
              IMAGE_REF="${IMAGE_NAME}:${{ github.sha }}"
            fi
            echo "üöÄ Deploying image: $IMAGE_REF"

            # Docker login
            echo "üîê Logging into Docker Hub..."
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ vars.DOCKER_USERNAME }}" --password-stdin
            echo "‚úÖ Docker login successful"

            # Ensure network exists
            echo "üåê Ensuring web network exists..."
            if ! docker network inspect web >/dev/null 2>&1; then
              docker network create web
              echo "‚úÖ Created web network"
            else
              echo "‚úÖ Web network already exists"
            fi

            # Stop and remove old container
            echo "üîÑ Stopping old container..."
            if docker ps -q -f name="$CONTAINER" | grep -q .; then
              docker stop "$CONTAINER"
              echo "‚úÖ Stopped old container"
            fi
            docker rm -f "$CONTAINER" 2>/dev/null || true

            # Pull new image
            echo "üì• Pulling new image..."
            docker pull "$IMAGE_REF"
            echo "‚úÖ Image pulled successfully"

            # Start new container
            echo "üöÄ Starting new container..."
            docker run -d --name "$CONTAINER" \
              --network web \
              -e HOSTNAME=0.0.0.0 \
              -e PORT=$PORT \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
              -e NEXTAUTH_URL="${{ vars.NEXTAUTH_URL }}" \
              --restart unless-stopped \
              "$IMAGE_REF"
            echo "‚úÖ Container started"

            # Health check
            echo "üè• Performing health check..."
            HEALTH_CHECK_PASSED=false
            for i in {1..30}; do
              # Check if container is running
              if ! docker ps -q -f name="$CONTAINER" | grep -q .; then
                echo "‚ùå Container is not running"
                break
              fi
              
              # Check if the application is responding using Node.js
              if docker exec "$CONTAINER" node -e "
                const http = require('http');
                const options = { hostname: 'localhost', port: $PORT, path: '/', timeout: 2000 };
                const req = http.request(options, (res) => {
                  console.log('OK');
                  process.exit(0);
                });
                req.on('error', () => process.exit(1));
                req.on('timeout', () => process.exit(1));
                req.setTimeout(2000);
                req.end();
              " 2>/dev/null; then
                echo "‚úÖ Application is healthy and responding"
                HEALTH_CHECK_PASSED=true
                break
              fi
              echo "‚è≥ Attempt $i/30: Application not ready yet, waiting 2s..."
              sleep 2
            done

            if [ "$HEALTH_CHECK_PASSED" != "true" ]; then
              echo "‚ùå Health check failed - checking container status and logs:"
              docker ps -a -f name="$CONTAINER"
              echo "--- Container Logs ---"
              docker logs "$CONTAINER" --tail 50
              exit 1
            fi

            # Cleanup
            echo "üßπ Cleaning up old images..."
            docker image prune -f
            echo "‚úÖ Deployment completed successfully!"
