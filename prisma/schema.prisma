generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["qrorder"]
}

model customisation_options {
  id                     Int                      @id @default(autoincrement())
  option_name            String                   @db.VarChar(255)
  restaurant_id          Int
  restaurants            restaurants              @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, map: "customisation_options_restaurant_id_fkey")
  dish_available_options dish_available_options[]
  option_values          option_values[]

  @@unique([restaurant_id, option_name], map: "restaurant_id_option_name")
  @@schema("qrorder")
}

model dish_available_options {
  dish_id               Int
  option_id             Int
  dishes                dishes                @relation(fields: [dish_id], references: [id], onDelete: Cascade, map: "dish_available_options_dish_id_fkey")
  customisation_options customisation_options @relation(fields: [option_id], references: [id], onDelete: Cascade, map: "dish_available_options_option_id_fkey")

  @@id([dish_id, option_id], map: "DISH_AVAILABLE_OPTIONS_pkey")
  @@index([option_id], map: "dish_available_options_option_id_idx")
  @@schema("qrorder")
}

model dish_categories {
  id            Int         @id @default(autoincrement())
  restaurant_id Int
  category_name String      @default("Uncategorised") @db.VarChar(255)
  restaurants   restaurants @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, map: "dish_categories_restaurant_id_fkey")
  dishes        dishes[]

  @@unique([restaurant_id, category_name], map: "restaurant_id_category_name")
  @@schema("qrorder")
}

model dishes {
  id                     Int                      @id @default(autoincrement())
  category_id            Int
  dish_name              String                   @unique(map: "dishes_dish_name_key") @db.VarChar(255)
  description            String
  base_price             Decimal                  @db.Decimal(10, 2)
  dish_available_options dish_available_options[]
  dish_categories        dish_categories          @relation(fields: [category_id], references: [id], onDelete: SetDefault, map: "dishes_category_id_fkey")
  order_details          order_details[]

  @@index([category_id], map: "dishes_category_id_idx")
  @@schema("qrorder")
}

model option_values {
  id                                 Int                                  @id @default(autoincrement())
  option_id                          Int
  value_name                         String                               @db.VarChar(255)
  extra_price                        Decimal                              @db.Decimal(10, 2)
  customisation_options              customisation_options                @relation(fields: [option_id], references: [id], onDelete: Cascade, map: "option_values_option_id_fkey")
  order_detail_customisation_options order_detail_customisation_options[]

  @@unique([option_id, value_name], map: "option_id_value_name")
  @@schema("qrorder")
}

model order_detail_customisation_options {
  value_id        Int
  order_detail_id Int
  order_details   order_details @relation(fields: [order_detail_id], references: [id], onDelete: Cascade, map: "order_detail_customisation_options_order_detail_id_fkey")
  option_values   option_values @relation(fields: [value_id], references: [id], onDelete: Cascade, map: "order_detail_customisation_options_value_id_fkey")

  @@id([value_id, order_detail_id], map: "ORDER_DETAIL_CUSTOMISATION_OPTIONS_pkey")
  @@index([order_detail_id], map: "order_detail_customisation_options_order_detail_id_idx")
  @@schema("qrorder")
}

model order_details {
  id                                 Int                                  @id @default(autoincrement())
  order_id                           Int
  dish_id                            Int
  quantity                           Int
  order_detail_customisation_options order_detail_customisation_options[]
  dishes                             dishes                               @relation(fields: [dish_id], references: [id], map: "order_details_dish_id_fkey")
  orders                             orders                               @relation(fields: [order_id], references: [id], onDelete: Cascade, map: "order_details_order_id_fkey")

  @@unique([order_id, id, dish_id], map: "order_id_order_detail_id_dish_id")
  @@index([dish_id], map: "order_details_dish_id_idx")
  @@schema("qrorder")
}

model orders {
  id            Int             @id @default(autoincrement())
  restaurant_id Int
  order_number  Int
  customer_name String          @db.VarChar(255)
  total_price   Decimal         @db.Decimal(10, 2)
  order_time    DateTime        @default(now())
  table_id      Int
  comment       String?
  status        order_status    @default(Pending)
  order_details order_details[]
  restaurants   restaurants     @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, map: "orders_restaurant_id_fkey")
  tables        tables          @relation(fields: [table_id], references: [id], onDelete: Cascade, map: "orders_table_id_fkey")

  @@unique([restaurant_id, order_number], map: "restaurant_id_order_number")
  @@index([table_id], map: "orders_table_id_idx")
  @@schema("qrorder")
}

model restaurants {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique(map: "restaurants_name_key") @db.VarChar(255)
  email                 String                  @unique(map: "restaurants_email_key") @db.VarChar(255)
  phone                 String                  @unique(map: "restaurants_phone_key") @db.VarChar(255)
  address               String                  @db.VarChar(255)
  password              String                  @db.VarChar(255)
  is_admin              Boolean                 @default(false)
  summary               String?
  customisation_options customisation_options[]
  dish_categories       dish_categories[]
  orders                orders[]
  tables                tables[]

  @@schema("qrorder")
}

model tables {
  id            Int         @id @default(autoincrement())
  restaurant_id Int
  table_number  String      @db.VarChar(16)
  capacity      Int
  orders        orders[]
  restaurants   restaurants @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, map: "tables_restaurant_id_fkey")

  @@unique([restaurant_id, table_number], map: "restaurant_id_table_number")
  @@schema("qrorder")
}

enum order_status {
  Pending
  Making
  Completed
  Cancelled

  @@schema("qrorder")
}
